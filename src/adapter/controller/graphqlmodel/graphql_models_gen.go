// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphqlmodel

import (
	"fmt"
	"io"
	"strconv"
)

// コンテンツ
type Content interface {
	IsContent()
}

type Node interface {
	IsNode()
}

// 画像コンテンツ
type ImageContent struct {
	ID string `json:"id"`
	// コンテンツ名
	Name *string `json:"name"`
	// コンテンツタイプ
	ContentType ContentType `json:"contentType"`
	// 画像パス
	Path string `json:"path"`
}

func (ImageContent) IsContent() {}

// 動画コンテンツ
type MovieContent struct {
	ID string `json:"id"`
	// コンテンツ名
	Name *string `json:"name"`
	// コンテンツタイプ
	ContentType ContentType `json:"contentType"`
}

func (MovieContent) IsContent() {}

type MutationResponse struct {
	ID *string `json:"id"`
}

type NoopInput struct {
	ClientMutationID *string `json:"clientMutationId"`
}

type NoopPayload struct {
	ClientMutationID *string `json:"clientMutationId"`
}

// その他コンテンツ
type OtherContent struct {
	ID string `json:"id"`
	// コンテンツ名
	Name *string `json:"name"`
	// コンテンツタイプ
	ContentType ContentType `json:"contentType"`
}

func (OtherContent) IsContent() {}

// テキストコンテンツ
type TextContent struct {
	ID string `json:"id"`
	// コンテンツ名
	Name *string `json:"name"`
	// コンテンツタイプ
	ContentType ContentType `json:"contentType"`
	// テキスト
	Text string `json:"text"`
}

func (TextContent) IsContent() {}

// 音声コンテンツ
type VoiceContent struct {
	ID string `json:"id"`
	// コンテンツ名
	Name *string `json:"name"`
	// コンテンツタイプ
	ContentType ContentType `json:"contentType"`
}

func (VoiceContent) IsContent() {}

// 「今日こと」検索条件
type WhtConditionInput struct {
	// ID
	ID *string `json:"id"`
}

// 「今日こと」画像インプット
type WhtImageInput struct {
	// タイトル
	Title *string `json:"title"`
	// コンテンツ名
	Name *string `json:"name"`
	// 画像パス
	Path string `json:"path"`
}

// 「今日こと」動画インプット
type WhtMovieInput struct {
	// タイトル
	Title *string `json:"title"`
	// コンテンツ名
	Name *string `json:"name"`
}

// 「今日こと」その他インプット
type WhtOtherInput struct {
	// タイトル
	Title *string `json:"title"`
	// コンテンツ名
	Name *string `json:"name"`
}

// 「今日こと」テキストインプット
type WhtTextInput struct {
	// タイトル
	Title *string `json:"title"`
	// コンテンツ名
	Name *string `json:"name"`
	// テキスト
	Text string `json:"text"`
}

// 「今日こと」音声インプット
type WhtVoiceInput struct {
	// タイトル
	Title *string `json:"title"`
	// コンテンツ名
	Name *string `json:"name"`
}

// コンテンツタイプ
type ContentType string

const (
	// テキスト
	ContentTypeText ContentType = "Text"
	// 画像
	ContentTypeImage ContentType = "Image"
	// 音声
	ContentTypeVoice ContentType = "Voice"
	// 動画
	ContentTypeMovie ContentType = "Movie"
	// その他
	ContentTypeOther ContentType = "Other"
)

var AllContentType = []ContentType{
	ContentTypeText,
	ContentTypeImage,
	ContentTypeVoice,
	ContentTypeMovie,
	ContentTypeOther,
}

func (e ContentType) IsValid() bool {
	switch e {
	case ContentTypeText, ContentTypeImage, ContentTypeVoice, ContentTypeMovie, ContentTypeOther:
		return true
	}
	return false
}

func (e ContentType) String() string {
	return string(e)
}

func (e *ContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentType", str)
	}
	return nil
}

func (e ContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
