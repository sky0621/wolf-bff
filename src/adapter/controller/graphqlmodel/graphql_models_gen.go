// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphqlmodel

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
}

type MutationResponse struct {
	ID *string `json:"id"`
}

type NoopInput struct {
	ClientMutationID *string `json:"clientMutationId"`
}

type NoopPayload struct {
	ClientMutationID *string `json:"clientMutationId"`
}

type Role string

const (
	RoleAdmin   Role = "ADMIN"
	RoleManager Role = "MANAGER"
	RoleEditor  Role = "EDITOR"
	RoleViewer  Role = "VIEWER"
	RoleGuest   Role = "GUEST"
)

var AllRole = []Role{
	RoleAdmin,
	RoleManager,
	RoleEditor,
	RoleViewer,
	RoleGuest,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleManager, RoleEditor, RoleViewer, RoleGuest:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
